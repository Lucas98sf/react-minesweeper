{"version":3,"sources":["types/index.ts","functions/minesweeper.ts","config/constants.js","components/Bomb.tsx","components/Square.tsx","components/Flag.tsx","components/Board.tsx","index.tsx"],"names":["Value","MouseButton","squareIsAround","row","col","clickedRow","clickedCol","includes","generateSquaresValues","firstClick","bombs","randomCoord","MAX","Math","random","newBomb","some","bomb","i","push","generateBombs","squares","r","c","hasBomb","square","state","flagged","visible","value","zero","revealSurroundingSquares","revealSquare","clickCoords","clickedSquare","squareCoords","bombCount","forEach","rows","columns","getSquareValue","squareValue","flagsCount","flagsAroundSquare","Bomb","className","src","alt","Square","props","onClick","onAuxClick","content","Flag","Board","useState","j","generateEmptySquares","setSquares","isFirstClick","useRef","document","addEventListener","e","target","tagName","preventDefault","handleClick","button","clickedCoords","current","left","middle","right","toggleSquareFlag","useEffect","flat","filter","isGameLost","alert","every","isGameWon","getContent","board","map","generatedRow","column","ReactDOM","render","getElementById"],"mappings":"2IAEYA,EAiCAC,E,uDAjCAD,O,eAAAA,I,aAAAA,I,aAAAA,I,iBAAAA,I,eAAAA,I,eAAAA,I,aAAAA,I,iBAAAA,I,iBAAAA,I,gBAAAA,M,cAiCAC,O,eAAAA,I,mBAAAA,I,kBAAAA,M,gBChCNC,EAAiB,SAAC,EAAD,GAGR,IAFZC,EAEW,EAFXA,IAAKC,EAEM,EAFNA,IACAC,EACM,EADXF,IAAsBG,EACX,EADMF,IAEnB,SACE,CAACC,EAAa,EAAGA,EAAa,GAAGE,SAASJ,IAC1C,CAACG,EAAa,EAAGA,EAAa,GAAGC,SAASH,IAC1CC,IAAeF,GAAO,CAACG,EAAa,EAAGA,EAAa,GAAGC,SAASH,IAChEE,IAAeF,GAAO,CAACC,EAAa,EAAGA,EAAa,GAAGE,SAASJ,KAkFtDK,EAAwB,SACpCC,GAKA,IAHA,IAAMC,EA9Ee,SAACD,GAKtB,IAJA,IAAaJ,EAAgCI,EAArCN,IAAsBG,EAAeG,EAApBL,IAEnBM,EAAwB,GACxBC,EAAc,SAACC,GAAD,OAAkBC,KAAKC,SAAWF,GAAQ,GAJK,cAMlE,IAAMG,EAAwB,CAC7BZ,IAAKQ,ECrBkB,GDsBvBP,IAAKO,ECrBiB,IDwBrBD,EAAMM,MACN,SAACC,GAAD,OAAUA,EAAKd,MAAQY,EAAQZ,KAAOc,EAAKb,MAAQW,EAAQX,QAE3DF,EAAea,EAASN,IACvBM,EAAQZ,MAAQE,GAAcU,EAAQX,MAAQE,IACTY,EAAxBR,EAAMS,KAAKJ,GAhBuC,KAK1DG,EAAI,EAAGA,ECpBQ,GDoBOA,IAAM,EAA5BA,GAcT,OAAOR,EA2DOU,CAAcX,GACtBY,EAAwB,GAFZ,WAITC,GAER,IADA,IAAMnB,EAAqB,GALV,WAMRoB,GACR,IAAMC,EAAUd,EAAMM,MAAK,SAACC,GAAD,OAAUA,EAAKd,MAAQmB,GAAKL,EAAKb,MAAQmB,KAE9DE,EAAsB,CAC3BD,UACAE,MAAO,CACNC,SAAS,EACTC,QALcnB,EAAWN,MAAQmB,GAAKb,EAAWL,MAAQmB,EAMzDM,MAAOL,EAAUxB,EAAMiB,KAAOjB,EAAM8B,OAGtC3B,EAAIgB,KAAKM,IAXDF,EAAI,EAAGA,EChGO,EDgGQA,IAAM,EAA5BA,GAaTF,EAAQF,KAAKhB,IAfLmB,EAAI,EAAGA,EC/FS,ED+FOA,IAAM,EAA7BA,GAkBT,OAD+BS,EAAyBV,EAASZ,IAIrDuB,EAAe,SAC3BX,EACAY,GAEA,IAAQ9B,EAAa8B,EAAb9B,IAAKC,EAAQ6B,EAAR7B,IACP8B,EAAgBb,EAAQlB,GAAKC,GAWnC,OATA8B,EAAcR,MAAMG,MAAQK,EAAcV,QACvCxB,EAAMiB,KAxFa,SACtBI,EACAc,GAEA,IAAIC,EAAY,EAShB,OARAf,EAAQgB,SAAQ,SAACC,EAAMnC,GACtBmC,EAAKD,SAAQ,SAACE,EAASnC,GACtB,IAAMqB,EAAsBJ,EAAQlB,GAAKC,GACrCF,EAAe,CAAEC,MAAKC,OAAO+B,IAAiBV,EAAOD,SACxDY,UAIIA,EA4EJI,CAAenB,EAASY,GAC3BC,EAAcR,MAAME,SAAU,EAERM,EAAcR,MAAMG,QAAU7B,EAAM8B,OAEzDT,EAAUU,EAAyBV,EAASY,IAEtC,YAAIZ,IAGCU,EAA2B,SACvCV,EACAY,GAEA,IAAa5B,EAAgC4B,EAArC9B,IAAsBG,EAAe2B,EAApB7B,IAGnBqC,EADgBpB,EAAQhB,GAAYC,GACRoB,MAAMG,MAkBxC,OAhBiB,IAAhBY,GACAA,IA7FwB,SACzBpB,EACAY,GAEA,IAAIS,EAAa,EAUjB,OATArB,EAAQgB,SAAQ,SAACC,EAAMnC,GACtBmC,EAAKD,SAAQ,SAACE,EAASnC,GAErBF,EAAe,CAAEC,MAAKC,OAAO6B,IAC7BZ,EAAQlB,GAAKC,GAAKsB,MAAMC,SAExBe,UAGIA,EA+EUC,CAAkBtB,EAASY,IAE3CZ,EAAQgB,SAAQ,SAACC,EAAMnC,GACtBmC,EAAKD,SAAQ,SAACE,EAASnC,GACtB,IAAMqB,EAAsBJ,EAAQlB,GAAKC,IAExCF,EAAe,CAAEC,MAAKC,OAAO6B,IAC5BR,EAAOC,MAAME,SACbH,EAAOC,MAAMC,UAEdN,EAAUW,EAAaX,EAAS,CAAElB,MAAKC,eAKpC,YAAIiB,I,OEpKL,SAASuB,IACf,OAAO,qBAAKC,UAAU,OAAOC,IAAI,WAAWC,IAAI,SCC1C,SAASC,EAAOC,GACtB,IAAQJ,EAA4CI,EAA5CJ,UAAWK,EAAiCD,EAAjCC,QAASC,EAAwBF,EAAxBE,WAAYC,EAAYH,EAAZG,QACxC,OACC,wBAAQP,UAAWA,EAAWK,QAASA,EAASC,WAAYA,EAA5D,SACEC,ICNG,SAASC,IACf,OAAO,qBAAKR,UAAU,OAAOC,IAAI,WAAWC,IAAI,SCgGlCO,MA1Ef,WACC,MAA8BC,mBLiDK,WAEnC,IADA,IAAMlC,EAAwB,GACrBH,EAAI,EAAGA,ECvES,EDuEOA,IAAK,CAEpC,IADA,IAAMf,EAAqB,GAClBqD,EAAI,EAAGA,ECxEO,EDwEQA,IAAK,CACnC,IAAM/B,EAAsB,CAC3BD,SAAS,EACTE,MAAO,CACNC,SAAS,EACTC,SAAS,EACTC,MAAO7B,EAAM8B,OAGf3B,EAAIgB,KAAKM,GAEVJ,EAAQF,KAAKhB,GAEd,OAAOkB,EKlE8CoC,IAArD,mBAAOpC,EAAP,KAAgBqC,EAAhB,KACMC,EAAeC,kBAAgB,GAErCC,SAASC,iBAAiB,eAAe,SAACC,GACzC,IAAMC,EAASD,EAAEC,OACO,UAAd,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQC,UAAoBF,EAAEG,oBAGnC,IAAMC,EAAc,SACnBC,EACAC,GAEA,IAAQlE,EAAakE,EAAblE,IAAKC,EAAQiE,EAARjE,IAEb,EADsBiB,EAAQlB,GAAKC,GACQsB,MAAnCE,EAAR,EAAQA,QAASD,EAAjB,EAAiBA,QAEjB,GAAIgC,EAAaW,QAEhB,OADAX,EAAaW,SAAU,EAChBZ,EAAWlD,EAAsB6D,IAGrCD,IAAWnE,EAAYsE,MAAU3C,GAAWD,GAC/C+B,EAAW1B,EAAaX,EAASgD,IAG9BD,IAAWnE,EAAYuE,QAAU5C,GACpC8B,EAAW3B,EAAyBV,EAASgD,IAG1CD,IAAWnE,EAAYwE,OAAU7C,GACpC8B,ELiH6B,SAC/BrC,EAD+B,GAGZ,IADjBlB,EACgB,EADhBA,IAAKC,EACW,EADXA,IAEDqB,EAAsBJ,EAAQlB,GAAKC,GAEzC,OADAqB,EAAOC,MAAMC,SAAWF,EAAOC,MAAMC,QAC9B,YAAIN,GKvHEqD,CAAiBrD,EAASgD,KAIvCM,qBAAU,WACT,OLqHwB,SAACtD,GAI1B,OAHuBA,EACrBuD,OACAC,QAAO,SAACpD,GAAD,OAAYA,EAAOC,MAAME,WACZZ,MAAK,SAACS,GAAD,OAAYA,EAAOD,WKzHzCsD,CAAWzD,GAAiB0D,MAAM,aL4Hf,SAAC1D,GAQzB,OAPoCA,EAClCuD,OACAI,OACA,SAACvD,GAAD,OACEA,EAAOC,MAAME,UAAYH,EAAOD,SAChCC,EAAOC,MAAMC,SAAWF,EAAOD,WKjI9ByD,CAAU5D,GAAiB0D,MAAM,iBAArC,KAGD,IAAMG,EAAa,SAACzD,GACnB,MAAoCA,EAAOC,MAAnCE,EAAR,EAAQA,QAASD,EAAjB,EAAiBA,QAASE,EAA1B,EAA0BA,MAC1B,OAAIF,EAAgB,cAAC0B,EAAD,IAChBzB,GACCC,EAAcJ,EAAOD,QAAU,cAACoB,EAAD,IAAWf,EAExC,MAGFsD,EAAQ9D,EAAQ+D,KAAI,SAAC9C,EAAMnC,GAChC,IAAMkF,EAAe/C,EAAK8C,KAAI,SAACE,EAAQlF,GACtC,IAAMqB,EAAsBJ,EAAQlB,GAAKC,GACnC6C,EAAqB,CAC1BJ,UAAWpB,EAAOC,MAAME,QAAb,iBACE5B,EAAMyB,EAAOC,MAAMG,QAC7B,SACHqB,QAAS,SAACa,GAAD,OACRI,EAAYJ,EAAEK,OAAQ,CAAEjE,MAAKC,SAC9B+C,WAAY,SAACY,GAAD,OACXI,EAAYJ,EAAEK,OAAQ,CAAEjE,MAAKC,SAC9BgD,QAAS8B,EAAWzD,IAErB,OAAO,cAACuB,EAAD,eAAkCC,GAAlC,UAAgB9C,EAAhB,YAAuBC,OAE/B,OACC,qBAAeyC,UAAU,MAAzB,SACEwC,GADQlF,MAMZ,OAAO,qBAAK0C,UAAU,QAAf,SAAwBsC,KCzFhCI,IAASC,OAAO,cAAC,EAAD,IAAW3B,SAAS4B,eAAe,W","file":"static/js/main.a760048b.chunk.js","sourcesContent":["import { MouseEventHandler, ReactElement } from \"react\";\r\n\r\nexport enum Value {\r\n\tzero,\r\n\tone,\r\n\ttwo,\r\n\tthree,\r\n\tfour,\r\n\tfive,\r\n\tsix,\r\n\tseven,\r\n\teight,\r\n\tbomb,\r\n}\r\n\r\nexport type Content = ReactElement | Value | null;\r\n\r\nexport type SquareProps = {\r\n\tclassName: string;\r\n\tonClick: MouseEventHandler<HTMLButtonElement>;\r\n\tonAuxClick: MouseEventHandler<HTMLButtonElement>;\r\n\tcontent: Content;\r\n};\r\n\r\nexport type SquareState = {\r\n\thasBomb: boolean;\r\n\tstate: {\r\n\t\tflagged: boolean;\r\n\t\tvisible: boolean;\r\n\t\tvalue: Value;\r\n\t};\r\n};\r\n\r\nexport type SquaresBoard = SquareState[][];\r\n\r\nexport enum MouseButton {\r\n\tleft,\r\n\tmiddle,\r\n\tright,\r\n}\r\n\r\nexport type SquareCoords = {\r\n\trow: number;\r\n\tcol: number;\r\n};\r\n","import { NUM_BOMBS, MAX_HEIGHT, MAX_WIDTH } from \"../config/constants\";\r\nimport { SquaresBoard, SquareState, SquareCoords, Value } from \"../types\";\r\n\r\nconst squareIsAround = (\r\n\t{ row, col }: SquareCoords,\r\n\t{ row: clickedRow, col: clickedCol }: SquareCoords\r\n): boolean => {\r\n\tif (\r\n\t\t([clickedRow - 1, clickedRow + 1].includes(row) &&\r\n\t\t\t[clickedCol - 1, clickedCol + 1].includes(col)) || //corners\r\n\t\t(clickedRow === row && [clickedCol - 1, clickedCol + 1].includes(col)) || //up or down\r\n\t\t(clickedCol === col && [clickedRow - 1, clickedRow + 1].includes(row)) //right or left\r\n\t)\r\n\t\treturn true;\r\n\r\n\treturn false;\r\n};\r\n\r\nconst generateBombs = (firstClick: SquareCoords): SquareCoords[] => {\r\n\tconst { row: clickedRow, col: clickedCol } = firstClick;\r\n\r\n\tconst bombs: SquareCoords[] = [];\r\n\tconst randomCoord = (MAX: number) => (Math.random() * MAX) << 0;\r\n\tfor (let i = 0; i < NUM_BOMBS; i++) {\r\n\t\tconst newBomb: SquareCoords = {\r\n\t\t\trow: randomCoord(MAX_HEIGHT),\r\n\t\t\tcol: randomCoord(MAX_WIDTH),\r\n\t\t};\r\n\t\tconst validLocation =\r\n\t\t\t!bombs.some(\r\n\t\t\t\t(bomb) => bomb.row === newBomb.row && bomb.col === newBomb.col\r\n\t\t\t) &&\r\n\t\t\t!squareIsAround(newBomb, firstClick) &&\r\n\t\t\t!(newBomb.row === clickedRow && newBomb.col === clickedCol);\r\n\t\tvalidLocation ? bombs.push(newBomb) : --i;\r\n\t}\r\n\r\n\treturn bombs;\r\n};\r\n\r\nconst getSquareValue = (\r\n\tsquares: SquaresBoard,\r\n\tsquareCoords: SquareCoords\r\n): Value => {\r\n\tlet bombCount = 0;\r\n\tsquares.forEach((rows, row) => {\r\n\t\trows.forEach((columns, col) => {\r\n\t\t\tconst square: SquareState = squares[row][col];\r\n\t\t\tif (squareIsAround({ row, col }, squareCoords) && square.hasBomb) {\r\n\t\t\t\tbombCount++;\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\treturn bombCount;\r\n};\r\n\r\nconst flagsAroundSquare = (\r\n\tsquares: SquaresBoard,\r\n\tclickCoords: SquareCoords\r\n): number => {\r\n\tlet flagsCount = 0;\r\n\tsquares.forEach((rows, row) => {\r\n\t\trows.forEach((columns, col) => {\r\n\t\t\tif (\r\n\t\t\t\tsquareIsAround({ row, col }, clickCoords) &&\r\n\t\t\t\tsquares[row][col].state.flagged\r\n\t\t\t)\r\n\t\t\t\tflagsCount++;\r\n\t\t});\r\n\t});\r\n\treturn flagsCount;\r\n};\r\n\r\nexport const generateEmptySquares = (): SquaresBoard => {\r\n\tconst squares: SquaresBoard = [];\r\n\tfor (let i = 0; i < MAX_HEIGHT; i++) {\r\n\t\tconst row: SquareState[] = [];\r\n\t\tfor (let j = 0; j < MAX_WIDTH; j++) {\r\n\t\t\tconst square: SquareState = {\r\n\t\t\t\thasBomb: false,\r\n\t\t\t\tstate: {\r\n\t\t\t\t\tflagged: false,\r\n\t\t\t\t\tvisible: false,\r\n\t\t\t\t\tvalue: Value.zero,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t\trow.push(square);\r\n\t\t}\r\n\t\tsquares.push(row);\r\n\t}\r\n\treturn squares;\r\n};\r\n\r\nexport const generateSquaresValues = (\r\n\tfirstClick: SquareCoords\r\n): SquaresBoard => {\r\n\tconst bombs = generateBombs(firstClick);\r\n\tconst squares: SquaresBoard = [];\r\n\r\n\tfor (let r = 0; r < MAX_HEIGHT; r++) {\r\n\t\tconst row: SquareState[] = [];\r\n\t\tfor (let c = 0; c < MAX_WIDTH; c++) {\r\n\t\t\tconst hasBomb = bombs.some((bomb) => bomb.row === r && bomb.col === c);\r\n\t\t\tconst visible = firstClick.row === r && firstClick.col === c;\r\n\t\t\tconst square: SquareState = {\r\n\t\t\t\thasBomb,\r\n\t\t\t\tstate: {\r\n\t\t\t\t\tflagged: false,\r\n\t\t\t\t\tvisible,\r\n\t\t\t\t\tvalue: hasBomb ? Value.bomb : Value.zero,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t\trow.push(square);\r\n\t\t}\r\n\t\tsquares.push(row);\r\n\t}\r\n\tconst squaresAfterFirstClick = revealSurroundingSquares(squares, firstClick);\r\n\treturn squaresAfterFirstClick;\r\n};\r\n\r\nexport const revealSquare = (\r\n\tsquares: SquaresBoard,\r\n\tclickCoords: SquareCoords\r\n): SquaresBoard => {\r\n\tconst { row, col } = clickCoords;\r\n\tconst clickedSquare = squares[row][col];\r\n\r\n\tclickedSquare.state.value = clickedSquare.hasBomb\r\n\t\t? Value.bomb\r\n\t\t: getSquareValue(squares, clickCoords);\r\n\tclickedSquare.state.visible = true;\r\n\r\n\tconst isEmptySquare = clickedSquare.state.value === Value.zero;\r\n\tif (isEmptySquare) {\r\n\t\tsquares = revealSurroundingSquares(squares, clickCoords);\r\n\t}\r\n\treturn [...squares];\r\n};\r\n\r\nexport const revealSurroundingSquares = (\r\n\tsquares: SquaresBoard,\r\n\tclickCoords: SquareCoords\r\n): SquaresBoard => {\r\n\tconst { row: clickedRow, col: clickedCol } = clickCoords;\r\n\r\n\tconst clickedSquare = squares[clickedRow][clickedCol];\r\n\tconst squareValue = clickedSquare.state.value as Number;\r\n\tif (\r\n\t\tsquareValue === 0 ||\r\n\t\tsquareValue === flagsAroundSquare(squares, clickCoords)\r\n\t) {\r\n\t\tsquares.forEach((rows, row) => {\r\n\t\t\trows.forEach((columns, col) => {\r\n\t\t\t\tconst square: SquareState = squares[row][col];\r\n\t\t\t\tif (\r\n\t\t\t\t\tsquareIsAround({ row, col }, clickCoords) &&\r\n\t\t\t\t\t!square.state.visible &&\r\n\t\t\t\t\t!square.state.flagged\r\n\t\t\t\t) {\r\n\t\t\t\t\tsquares = revealSquare(squares, { row, col });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\treturn [...squares];\r\n};\r\n\r\nexport const toggleSquareFlag = (\r\n\tsquares: SquaresBoard,\r\n\t{ row, col }: SquareCoords\r\n): SquaresBoard => {\r\n\tconst square: SquareState = squares[row][col];\r\n\tsquare.state.flagged = !square.state.flagged;\r\n\treturn [...squares];\r\n};\r\n\r\nexport const isGameLost = (squares: SquaresBoard): boolean => {\r\n\tconst clickedSquares = squares\r\n\t\t.flat()\r\n\t\t.filter((square) => square.state.visible);\r\n\treturn clickedSquares.some((square) => square.hasBomb);\r\n};\r\n\r\nexport const isGameWon = (squares: SquaresBoard): boolean => {\r\n\tconst allSquaresRevealedOrFlagged = squares\r\n\t\t.flat()\r\n\t\t.every(\r\n\t\t\t(square) =>\r\n\t\t\t\t(square.state.visible && !square.hasBomb) ||\r\n\t\t\t\t(square.state.flagged && square.hasBomb)\r\n\t\t);\r\n\treturn allSquaresRevealedOrFlagged;\r\n};\r\n","// export const NUM_BOMBS = 40;\r\n// export const MAX_HEIGHT = 14;\r\n// export const MAX_WIDTH = 14;\r\nexport const NUM_BOMBS = 10;\r\nexport const MAX_HEIGHT = 7;\r\nexport const MAX_WIDTH = 7;","export function Bomb() {\r\n\treturn <img className=\"bomb\" src=\"bomb.svg\" alt=\"bomb\"></img>;\r\n}\r\n","import { SquareProps } from \"../types\";\n\nexport function Square(props: SquareProps) {\n\tconst { className, onClick, onAuxClick, content } = props;\n\treturn (\n\t\t<button className={className} onClick={onClick} onAuxClick={onAuxClick}>\n\t\t\t{content}\n\t\t</button>\n\t);\n}\n","export function Flag() {\r\n\treturn <img className=\"flag\" src=\"flag.svg\" alt=\"flag\"></img>;\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n\tSquareState,\r\n\tSquareProps,\r\n\tValue,\r\n\tMouseButton,\r\n\tContent,\r\n\tSquareCoords,\r\n\tSquaresBoard,\r\n} from \"../types\";\r\nimport {\r\n\tgenerateEmptySquares,\r\n\tgenerateSquaresValues,\r\n\trevealSquare,\r\n\trevealSurroundingSquares,\r\n\ttoggleSquareFlag,\r\n\tisGameLost,\r\n\tisGameWon,\r\n} from \"../functions/minesweeper\";\r\nimport { Bomb } from \"./Bomb\";\r\nimport { Square } from \"./Square\";\r\nimport { Flag } from \"./Flag\";\r\n\r\nfunction Board() {\r\n\tconst [squares, setSquares] = useState<SquaresBoard>(generateEmptySquares());\r\n\tconst isFirstClick = useRef<boolean>(true);\r\n\r\n\tdocument.addEventListener(\"contextmenu\", (e) => {\r\n\t\tconst target = e.target as HTMLElement;\r\n\t\tif (target?.tagName !== \"BODY\") e.preventDefault();\r\n\t}); //dont show context menu on right click\r\n\r\n\tconst handleClick = (\r\n\t\tbutton: MouseButton,\r\n\t\tclickedCoords: SquareCoords\r\n\t): void => {\r\n\t\tconst { row, col } = clickedCoords;\r\n\t\tconst clickedSquare = squares[row][col];\r\n\t\tconst { visible, flagged } = clickedSquare.state;\r\n\r\n\t\tif (isFirstClick.current) {\r\n\t\t\tisFirstClick.current = false;\r\n\t\t\treturn setSquares(generateSquaresValues(clickedCoords));\r\n\t\t}\r\n\r\n\t\tif (button === MouseButton.left && !(visible || flagged)) {\r\n\t\t\tsetSquares(revealSquare(squares, clickedCoords));\r\n\t\t}\r\n\r\n\t\tif (button === MouseButton.middle && visible) {\r\n\t\t\tsetSquares(revealSurroundingSquares(squares, clickedCoords));\r\n\t\t}\r\n\r\n\t\tif (button === MouseButton.right && !visible) {\r\n\t\t\tsetSquares(toggleSquareFlag(squares, clickedCoords));\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isGameLost(squares)) return alert(\"Game Over\");\r\n\t\tif (isGameWon(squares)) return alert(\"You won!\");\r\n\t});\r\n\r\n\tconst getContent = (square: SquareState): Content => {\r\n\t\tconst { visible, flagged, value } = square.state;\r\n\t\tif (flagged) return <Flag />;\r\n\t\tif (visible) {\r\n\t\t\tif (value) return square.hasBomb ? <Bomb /> : value;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tconst board = squares.map((rows, row) => {\r\n\t\tconst generatedRow = rows.map((column, col) => {\r\n\t\t\tconst square: SquareState = squares[row][col];\r\n\t\t\tconst props: SquareProps = {\r\n\t\t\t\tclassName: square.state.visible\r\n\t\t\t\t\t? `square ${Value[square.state.value]}`\r\n\t\t\t\t\t: \"square\",\r\n\t\t\t\tonClick: (e: React.MouseEvent<HTMLElement>) =>\r\n\t\t\t\t\thandleClick(e.button, { row, col }),\r\n\t\t\t\tonAuxClick: (e: React.MouseEvent<HTMLElement>) =>\r\n\t\t\t\t\thandleClick(e.button, { row, col }),\r\n\t\t\t\tcontent: getContent(square),\r\n\t\t\t};\r\n\t\t\treturn <Square key={`${row}-${col}`} {...props} />;\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div key={row} className=\"row\">\r\n\t\t\t\t{generatedRow}\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n\r\n\treturn <div className=\"board\">{board}</div>;\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport Board from \"./components/Board\";\n\nReactDOM.render(<Board />, document.getElementById(\"root\"));\n"],"sourceRoot":""}